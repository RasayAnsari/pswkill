-- Assignment : Windows Functions
-- 1. **Rank the customers based on the total amount they've spent on rentals.** 
select * from customer;
select * from payment;
select c.customer_id,concat(c.first_name,' ',c.last_name) as customer_name,sum(p.amount) as Total_Amount_Spent,
rank() over(order by sum(p.amount) desc) as Customer_Rank from customer c join payment p on c.customer_id = p.customer_id
group by c.customer_id order by Total_Amount_Spent desc;

-- 2. **Calculate the cumulative revenue generated by each film over time.
select f.film_id,f.title as Title,sum(p.amount) over(partition by f.film_id order by p.payment_date) as cumulative_revenue from film f 
join inventory i on f.film_id = i.film_id join rental r on i.inventory_id = r.inventory_id join payment p on r.rental_id = p.rental_id
order by f.film_id,p.payment_date;

-- 3. Determine the average rental duration for each film, considering films with similar lengths.
select f.film_id,f.title as Title,f.rental_duration as Rental_Duration,avg(f.rental_duration) over(order by f.rental_duration) as avg_Rental_Duration
from film f order by f.film_id;

-- 4. **Identify the top 3 films in each category based on their rental counts.** 
with ranked_films as (
select f.film_id, f.title, c.name as Category, count(rental_id) as rental_count,
row_number() over (partition by c.name order by count(rental_id) desc) as Category_Rank
from film f join film_category fc on f.film_id = fc.film_id
join category c on fc.category_id = c.category_id
join inventory i on f.film_id = i.film_id
join rental r on i.inventory_id = r.inventory_id
group by f.film_id,f.title,c.name)
select film_id,title,category,rental_count from ranked_films where Category_Rank <= 3 order by category,Category_Rank;

-- 5. Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers
with customer_rentals as (
select c.customer_id, count(rental_id) as total_rentals, avg(count(rental_id)) over () as avg_rental_all_customers from customer c
left join rental r on c.customer_id = r.customer_id group by customer_id)
select customer_id, total_rentals, avg_rental_all_customers, total_rentals - avg_rental_all_customers as rental_count_diff from customer_rentals;

-- 6. To find the monthly revenue trend for the entire rental store over time.
with monthly_revenue as (
select date_format(r.rental_date, '%Y-%M') as rental_month,
sum(p.amount) as monthly_revenue, row_number() over (order by date_format(r.rental_date, '%Y-%M')) as month_rank from rental r 
join payment p on r.rental_id = p.rental_id group by date_format(r.rental_date, '%Y-%M') )
select rental_month, monthly_revenue, lag(monthly_revenue) over (order by month_rank) as previous_month_revenue
from monthly_revenue order by rental_month;

-- 7. Identify the customers whose total spending on rentals falls within the top 20% of all customers.
with customer_spending as (
select c.customer_id, sum(p.amount) as total_spending, percent_rank() over (order by sum(p.amount) desc) as spending_percentile from customer c
left join payment p on c.customer_id = p.customer_id group by customer_id)
select customer_id, total_spending from customer_spending where spending_percentile >= 0.8;

-- 8. Find the films that have been rented less than the average rental count for their respective categories.
WITH category_rentals AS (
select c.name as category, count(r.rental_id) as rental_count, row_number() over (partition by c.name order by count(r.rental_id) desc) as category_rank
from rental r join inventory i on r.inventory_id = i.inventory_id join film_category fc on i.film_id = fc.film_id 
join category c on fc.category_id = c.category_id group by c.name )
select category,rental_count, sum(rental_count) over (partition by category order by category_rank) as running_total 
from category_rentals order by category, category_rank;

-- 9. Find the films that have been rented less than the average rental count for their respective categories.
with category_avg_rental as (
select fc.film_id, c.name AS category, count(r.rental_id) as rental_count, avg(count(r.rental_id)) over (partition by c.name) as avg_rental_count
from rental r join inventory i on r.inventory_id = i.inventory_id
join film_category fc on i.film_id = fc.film_id
join category c on fc.category_id = c.category_id group by fc.film_id, c.name )
select f.film_id, f.title, car.category, car.rental_count, car.avg_rental_count from category_avg_rental car
join film f on car.film_id = f.film_id where car.rental_count < car.avg_rental_count;

-- 10.Identify the top 5 months with the highest revenue and display the revenue generated in each month.
WITH monthly_revenue AS (
    SELECT
        DATE_FORMAT(r.rental_date, '%Y-%m') AS rental_month,
        SUM(p.amount) AS monthly_revenue,
        ROW_NUMBER() OVER (ORDER BY SUM(p.amount) DESC) AS month_rank
    FROM
        rental r
    JOIN
        payment p ON r.rental_id = p.rental_id
    GROUP BY
        DATE_FORMAT(r.rental_date, '%Y-%m')
)
SELECT
    rental_month,
    monthly_revenue
FROM
    monthly_revenue
WHERE
    month_rank <= 5
ORDER BY
    month_rank;